<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:p="http://www.springframework.org/schema/p"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd">

    <!--scope: 指对象的作用范围，取值如下
     singleton:默认的，单例的；
     实例化个数：1
     实例化时机：当Spring核心文件被加载时，实例化配置的Bean实例
     生命周期：
     对象创建：当应用加载，创建容器时，实例化配置Bean实例
     对象运行：只要容器在，对象一直活着
     对象销毁：当应用卸载，销毁容器时，对象被销毁
     prototype:多例的；  新建对象为不同地址
     实例化个数：多个
     实例化时机：当调用getBean()方法时，实例化配置的Bean实例
     生命周期：
     对象创建：当使用对象时，创建对象实例
     对象运行：只要对象使用中，就一直活着
     对象销毁：当对象长时间不用，会被Java的垃圾回收器回收掉
     request:Web项目中，spring创建一个bean对象，将该对象传入request域中；
     session:Web项目中，spring创建一个bean对象，将该对象传入session域中；
     global session： Web项目中，应用在Portlet环境，如果没有Portlet环境那么global Session相当于session
     -->
    <!-- Bean生命周期配置
     init-method:初始化方法
     destroy-method:销毁方法
    -->
    <!--通过反射创建UserDaoImpl对象，默认使用空构造器-->
    <!--<bean id = 'UserDao' class="com.kawainekosann.dao.impl.UserDaoImpl" scope="singleton" init-method="init" destroy-method="destory"></bean>-->

    <!--工厂静态方法 通过factory-method去调用工厂类的静态方法-->
    <!--<bean id = 'UserDao' class="com.kawainekosann.factory.StaticFactory" factory-method="getUserDao"></bean>-->

    <!--工厂实例方法 先创建工厂的实例然后 factory-bean 和factory-method去创建 -->
<!--    <bean id="factory" class="com.kawainekosann.factory.DynamicFactory"></bean>
    <bean id="UserDao" factory-bean="factory" factory-method="getUserDao"></bean>-->

    <!--普通数据类型注入-->
    <!--<bean id = 'UserDao' class="com.kawainekosann.dao.impl.UserDaoImpl" >
        <property name="userName" value="feimao"></property>
        <property name="age" value="18"></property>
    </bean>-->
    <!--<bean id = 'UserDao' class="com.kawainekosann.dao.impl.UserDaoImpl" >
        <constructor-arg name="userName" value="feimao"></constructor-arg>
        <constructor-arg name="age" value="18"></constructor-arg>
    </bean>-->
    <!--集合数据类型注入-->
    <bean id = 'UserDao' class="com.kawainekosann.dao.impl.UserDaoImpl" >
        <property name="strList" >
            <list>
                <value>feimao2</value>
                <value>feimao3</value>
            </list>
        </property>
        <property name="userMap">
            <map>
                <entry key="feimao4" value-ref="User1"></entry>
                <entry key="feimao5" value-ref="User2"></entry>
            </map>
        </property>
        <property name="properties">
            <props>
                <prop key="feimao8">kawai</prop>
                <prop key="feimao9">kawai2</prop>
                <prop key="feimao10">kawai3</prop>
            </props>
        </property>
    </bean>
    <bean id = "User1" class="com.kawainekosann.domain.User">
        <property name="name" value="feimao6"></property>
        <property name="addr" value="Nantong"></property>
    </bean>
    <bean id = "User2" class="com.kawainekosann.domain.User">
        <property name="name" value="feimao7"></property>
        <property name="addr" value="Nantong1"></property>
    </bean>

    <!--<bean id="UserService" class="com.kawainekosann.service.impl.UserServiceImpl">
        &lt;!&ndash;name : set方法名去掉set，首字母小写  &ndash;&gt;
        <property name="userDao" ref="UserDao"></property>
    </bean>-->
    <!--p 命名空间-->
    <!--<bean id="UserService" class="com.kawainekosann.service.impl.UserServiceImpl" p:userDao-ref="UserDao"></bean>-->

    <!--构造器注入对象-->
    <bean id="UserService" class="com.kawainekosann.service.impl.UserServiceImpl">
        <!--userDao为有参构造器传入的参数名-->
        <constructor-arg name="userDao" ref="UserDao"></constructor-arg>
    </bean>

    <!--引入其他配置文件-->
    <import resource="applicationContext-product.xml"></import>
    <import resource="applicationContext-user.xml"></import>
</beans>